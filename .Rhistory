cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
library(devtools)
library(grid)
library(tidyverse)
library(htmltools)
library(leaflet)
library(rlang)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA', nmax = 3))
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 3)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 3)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 3)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12)
load_all()
library(devtools)
library(grid)
library(tidyverse)
library(htmltools)
library(leaflet)
library(rlang)
load_all()
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label3(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12, label = FALSE)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline_with_label(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12, label = FALSE)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12, label = FALSE)
load_all()
cleaned_df <- initial_cleaning()
trial_df <- cleaned_df %>% datecountry_filter(minyear = 2013, maxyear = 2017, countries = c('CHINA', 'INDONESIA')) %>% nmax_sort(12)
timeline(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12, label = TRUE)
use_testthat()
use_test()
library(devtools)
inherits(trial_df$Date, Date)
inherits(trial_df$Date, 'Date')
testthat::expect_s3_class(trial_df$Date, 'Date')
testthat::expect_s3_class(trial_df$Location, 'Date', )
testthat::expect_s3_class(trial_df$Location, 'Date')
View(trial_df)
testthat::expect_s3_class(trial_df$Location, 'character')
testthat::expect_s3_class(trial_df$Location, 'Character')
testthat::expect_type(trial_df$Location, 'Character')
testthat::expect_type(trial_df$Location, 'character')
testthat::expect_type(trial_df$Date, 'Date')
testthat::expect_contains(trial_df$Date, not(NA))
testthat::expect_contains(trial_df$Date, magrittr::not(NA))
testthat::expect_in(trial_df$Date, magrittr::not(NA))
View(trial_df)
testthat::expect_in(c("Location", "Magnitude"), names(trial_df))
min(trial_df%Date)
min(trial_df$Date)
tested_df<- clean_df %>% datecountry_filter(minyear = 2013, minmonth = 02, maxyear = 2017,
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
tested_df<- cleaned_df %>% datecountry_filter(minyear = 2013, minmonth = 02, maxyear = 2017,
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
View(tested_df)
tested_df<- cleaned_df %>% datecountry_filter(minyear = 2013, minmonth = 02, minday = 12, maxyear = 2017,
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
tested_df<- cleaned_df %>% datecountry_filter(minyear = 2013, minmonth = 02, minday = 12, maxyear = 2017,
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
View(tested_df)
View(tested_df)
tested_df<- cleaned_df %>% datecountry_filter(minyear = 2013, minmonth = 02, maxyear = 2017, maxmonth = 08, maxday = 08
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
tested_df<- cleaned_df %>% datecountry_filter(minyear = 2013, minmonth = 02, maxyear = 2017, maxmonth = 08, maxday = 08,
countries = c('CHINA', 'INDONESIA', 'INDIA', 'BRAZIL'))
View(tested_df)
expect_false('GERMANY' %in% trial_df$Country)
testthat::expect_false('GERMANY' %in% trial_df$Country)
plotdata <- timeline(df = cleaned_df, y= 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'), nmax = 12, label = TRUE)
View(plotdata)
class(plotdata)
plotdata
GeomTimeline <- ggplot2::ggproto(
"GeomTimeline",
ggplot2::Geom,
required_aes = c("x"),
optional_aes = c(
"y"       , "size"    , "shape"   , "colour", "fill",
"linesize", "linetype", "fontsize", "stroke"
),
default_aes  = ggplot2::aes(
shape    = 19     ,
y        = 0.15   ,
size     = 5      ,
alpha    = 0.5    ,
colour   = 'black',
fill     = 'black',
linesize = 0.5    ,
linetype = 1      ,
fontsize = 10     ,
stroke   =  1
),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_scales, coord) {
coords <-coord$transform(data, panel_scales)
if (length(unique(coords$y)) == 1) coords$y = 0.15
points <- grid::pointsGrob(
x    = coords$x                      ,
y    = coords$y                      ,
size = grid::unit(coords$size , "mm"),
pch  = coords$shape                  ,
gp   = grid::gpar(
col      = ggplot2::alpha(coords$colour, coords$alpha),
fill     = coords$fill                                ,
fontsize = grid::unit(coords$fontsize, "points")
)
)
ys     <- unique(coords$y)
rangex <- range(coords$x)
lines  <- grid::segmentsGrob(
x0 = rangex[1],
x1 = rangex[2],
y0 = ys,
y1 = ys,
gp = grid::gpar(
col  = ggplot2::alpha(coords$colour[1], coords$alpha[1]),
fill = ggplot2::alpha(coords$colour[1], coords$alpha[1]),
lwd  = grid::unit(coords$linesize[1], "mm"),
lty  = coords$linetype[1]
)
)
grid::gTree(children = grid::gList(lines, points))
})
lubridate::make_date(20221, 13, 12)
stopifnot(13 <= NA)
source("~/Documents/R_trial/courseraquakes/R/geom_timeline.R")
ggplot2::.pt
library(devtools)
load_all()
rm(list = 'geom_timeline')
load_all()
cleaned_df <- initial_cleaning()
timeline_with_label(df = cleaned_df, y = NULL, minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
load_all()
cleaned_df <- initial_cleaning()
timeline(df = cleaned_df, y = NULL, minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
timeline(df = cleaned_df, y = 0, minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
timeline(df = cleaned_df, y = 'NULL', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
load_all()
load_all()
cleaned_df <- initial_cleaning()
timeline(df = cleaned_df, y = NULL, minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
timeline(df = cleaned_df, y = 'Country', minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
doc_column <- character()
timeline(df = cleaned_df, y = Country, minyear = 2004, maxyear = 2005, minmonth = 02,
countries = c('INDIA', 'INDONESIA'))
testthat::test_check()
testthat::test_check(package = 'courseraquakes')
testthat::test_check(package = 'courseraquakes')
inmap <- eq_map(trial_df, "popup_text")
load_all()
library(devtools)
load_all()
library(devtools)
use_test('Filter_and_timeline')
use_test('datacleaning')
use_test('eq_map')
load_all()
test()
usethis::use_import_from("dplyr", 'mutate', load = F)
usethis::use_import_from("dplyr", 'rowwise', load = F)
usethis::use_import_from("dplyr", 'ungroup', load = F)
usethis::use_import_from("dplyr", 'group_by', load = F)
usethis::use_import_from("dplyr", 'slice', load = F)
usethis::use_import_from("tidyr", 'pivot_wider', load = F)
usethis::use_import_from("tidyr", 'pivot_longer', load = F)
usethis::use_import_from("dplyr", 'summarise', load = F)
usethis::use_import_from("dplyr", 'select', load = F)
usethis::use_import_from("dplyr", 'filter', load = F)
usethis::use_import_from("dplyr", 'desc', load = F)
usethis::use_import_from("dplyr", 'arrange', load = F)
usethis::use_import_from("dplyr", 'rename', load = F)
usethis::use_import_from("dplyr", 'coalesce', load = F)
usethis::use_import_from("dplyr", 'rowwise', load = F)
usethis::use_import_from("ggplot2", 'layer', load = F)
usethis::use_import_from("ggplot2", 'Geom', load = F)
usethis::use_import_from("ggplot2", 'ggproto', load = F)
usethis::use_import_from("ggplot2", 'ggplot', load = F)
usethis::use_import_from("ggplot2", 'ggproto', load = F)
usethis::use_import_from("ggplot2", 'aes', load = F)
usethis::use_import_from("ggplot2", 'draw_key_point', load = F)
usethis::use_import_from("ggplot2", 'alpha', load = F)
usethis::use_import_from("ggplot2", 'labs', load = F)
usethis::use_import_from("ggplot2", 'scale_size_continuous', load = F)
usethis::use_import_from("ggplot2", 'scale_color_continuous', load = F)
usethis::use_import_from("ggplot2", 'theme_classic', load = F)
usethis::use_import_from("ggplot2", 'position_nudge', load = F)
usethis::use_import_from("grid", 'pointsGrob', load = F)
usethis::use_import_from("grid", 'unit', load = F)
usethis::use_import_from("grid", 'gList', load = F)
usethis::use_import_from("grid", 'gpar', load = F)
usethis::use_import_from("grid", 'gTree', load = F)
usethis::use_import_from("grid", 'gList', load = F)
usethis::use_import_from("magrittr", "%>%", load = F)
usethis::use_import_from("readr", 'read_tsv', load = F)
usethis::use_import_from("stringr", 'str_extract', load = F)
usethis::use_import_from("stringr", 'str_detect', load = F)
usethis::use_import_from("stringr", 'str_to_title', load = F)
usethis::use_import_from("stringr", 'str_c', load = F)
usethis::use_import_from("stringr", 'str_replace', load = F)
usethis::use_import_from("lubridate", 'year', load = F)
usethis::use_import_from("lubridate", 'month', load = F)
usethis::use_import_from("lubridate", 'day', load = F)
usethis::use_import_from("lubridate", 'ymd', load = F)
usethis::use_import_from("lubridate", 'make_date', load = F)
usethis::use_import_from("tidyr", 'replace_na', load = F)
usethis::use_import_from("purrr", 'map_chr', load = F)
usethis::use_import_from("leaflet", 'leaflet', load = F)
usethis::use_import_from("leaflet", 'addTiles', load = F)
usethis::use_import_from("leaflet", 'addCircleMarkers', load = F)
usethis::use_import_from("htmltools", 'htmlEscape', load = F)
load_all()
devtools::test()
usethis::use_import_from("rlang", 'list2', load = F)
devtools::test()
devtools::test()
clean_df <- initial_cleaning()
inmap <- eq_map(clean_df, "popup_text", minyear = 2012, maxyear = 2021, countries = c('BRAZIL'))
inmap
eq_map(clean_df, "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
trial_df <- clean_df %>% rowwise() %>%
mutate(Location = str_c("<b>", "Location :", "</b>", Location)) %>%
mutate(Magnitude = str_c("<b>", "Magnitude :", "</b>", Magnitude)) %>%
mutate(`TDeath` = str_c("<b>", "Total Deaths :", "</b>", `Total Deaths`)) %>%
mutate(maplabel = str_c(
coalesce(Location, ""),
coalesce(Magnitude, ""),
coalesce(TDeath, ""),
sep = "<br/>"
))
trial_df <- clean_df %>% rowwise() %>%
mutate(Location = str_c("<b>", "Location :", "</b>", Location)) %>%
mutate(Magnitude = str_c("<b>", "Magnitude :", "</b>", Magnitude)) %>%
mutate(`TDeath` = str_c("<b>", "Total Deaths :", "</b>", `Total Deaths`)) %>%
mutate(maplabel = str_c(
coalesce(Location, ""),
coalesce(Magnitude, ""),
coalesce(TDeath, ""),
sep = "<br/>"
)) %>%
mutate(maplabel = str_replace(maplabel, "<br/><br/>", "<br/>")) %>%
mutate(maplabel = htmlEscape(maplabel))
leaflet(data = clean_df) %>% addTiles() %>% addCircleMarkers( ~ Longitude, ~
Latitude, popup = ~ maplabel)
View(trial_df)
eq_map(clean_df, "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
View(trial_df)
inmap <- eq_map(clean_df, "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
eq_map(clean_df, "Location", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
trial_df2 <- clean_df %>% rowwise() %>%
mutate(annotated = as.character(.data[[annotation]])) %>%
mutate(annotated = htmlEscape(annotated)) %>%
mutate(annotated = str_c("<b>", annotation, ": ", "</b>", annotated))
trial_df2 <- clean_df %>% rowwise() %>%
mutate(annotated = as.character(Location) %>%
mutate(annotated = htmlEscape(annotated)) %>%
mutate(annotated = str_c("<b>", 'Location', ": ", "</b>", annotated))
trial_df2 <- clean_df %>% rowwise() %>%
mutate(annotated = as.character(Location)) %>%
mutate(annotated = htmlEscape(annotated)) %>%
mutate(annotated = str_c("<b>", 'Location', ": ", "</b>", annotated))
View(trial_df2)
View(trial_df)
print(trial_df[1, 'maplabel'])
print(trial_df2[1, 'annotated'])
load_all()
inmap <- eq_map(clean_df, "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
rlang::last_trace()
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap <- eq_map(clean_df, annotation = NULL, minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
inmap <- eq_map(clean_df, minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
load_all()
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
load_all()
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
load_all()
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
load_all()
inmap <- eq_map(clean_df, annotation = "popup_text", minyear = 2012, maxyear = 2021, countries = c('INDONESIA'))
inmap
test()
use_readme_rmd()
library(devtools)
load_all()
document()
filtered_df  <- clean_df %>% datecountry_filter(minyear = 2001, maxyear = 2005, countries = c("UK", "US"))
clean_df <- initial_cleaning()
filtered_df  <- clean_df %>% datecountry_filter(minyear = 2001, maxyear = 2005, countries = c("UK", "US"))
finalplot <- ggplot() +
geom_timeline(
data = filtered_df,
mapping = aes(
x    = .data$Date,
y = Country,
size = .data$Magnitude,
col  = .data$Deaths
),
alpha = 0.8
) +
labs(x = "DATE")                                     +
scale_size_continuous (name = "Richter scale value") +
scale_color_continuous(name = "# deaths") +
theme_classic() +
geom_timeline_label(
data = filtered_df,
mapping = aes(
x = .data$Date,
y = Country,
label = .data$Location,
Magnitude = `Total Deaths`
),
nmax = nmax
)
finalplot <- ggplot() +
geom_timeline(
data = filtered_df,
mapping = aes(
x    = .data$Date,
y = Country,
size = .data$Magnitude,
col  = .data$Deaths
),
alpha = 0.8
) +
labs(x = "DATE")                                     +
scale_size_continuous (name = "Richter scale value") +
scale_color_continuous(name = "# deaths") +
theme_classic() +
geom_timeline_label(
data = filtered_df,
mapping = aes(
x = .data$Date,
y = Country,
label = .data$Location,
Magnitude = `Total Deaths`
),
nmax = 10
)
finalplot
finalplot <- ggplot() +
geom_timeline(
data = filtered_df,
mapping = aes(
x    = Date,
y    = Country,
size = Magnitude,
col  = `Total Deaths`
),
alpha = 0.8
) +
labs(x = "DATE")                                     +
scale_size_continuous (name = "Richter scale value") +
scale_color_continuous(name = "# deaths") +
theme_classic() +
geom_timeline_label(
data = filtered_df,
mapping = aes(
x = Date,
y = Country,
label = Location,
Magnitude = `Total Deaths`
),
nmax = 10
)
finalplot
filtered_df  <- clean_df %>% datecountry_filter(minyear = 2001, maxyear = 2005, countries = c("CAMBODIA", "PHILIPPINES"))
finalplot <- ggplot() +
geom_timeline(
data = filtered_df,
mapping = aes(
x    = Date,
y    = Country,
size = Magnitude,
col  = `Total Deaths`
),
alpha = 0.8
) +
labs(x = "DATE")                                     +
scale_size_continuous (name = "Richter scale value") +
scale_color_continuous(name = "# deaths") +
theme_classic() +
geom_timeline_label(
data = filtered_df,
mapping = aes(
x = Date,
y = Country,
label = Location,
Magnitude = `Total Deaths`
),
nmax = 10
)
finalplot
filtered_df  <- clean_df %>% datecountry_filter(minyear = 2001, maxyear = 2010, countries = c("CAMBODIA", "PHILIPPINES"))
View(filtered_df)
filtered_df  <- clean_df %>% datecountry_filter(minyear = 2001, maxyear = 2010, countries = c("VIETNAM", "PHILIPPINES"))
View(filtered_df)
finalplot <- ggplot() +
geom_timeline(
data = filtered_df,
mapping = aes(
x    = Date,
y    = Country,
size = Magnitude,
col  = `Total Deaths`
),
alpha = 0.8
) +
labs(x = "DATE")                                     +
scale_size_continuous (name = "Richter scale value") +
scale_color_continuous(name = "# deaths") +
theme_classic() +
geom_timeline_label(
data = filtered_df,
mapping = aes(
x = Date,
y = Country,
label = Location,
Magnitude = `Total Deaths`
),
nmax = 10
)
finalplot
View(filtered_df)
View(filtered_df)
View(clean_df)
eq_map(df = cleaned_df, annotation = 'popup_text', minyear = 2001, maxyear = 2015, countries = c('SYIRIA', 'JORDAN'))
eq_map(df = clean_df, annotation = 'popup_text', minyear = 2001, maxyear = 2015, countries = c('SYIRIA', 'JORDAN'))
eq_map(df = cleaned_df, annotation = 'popup_text', minyear = 2001, maxyear = 2015, countries = c('CONGO', 'TANZANIA'))
eq_map(df = clean_df, annotation = 'popup_text', minyear = 2001, maxyear = 2015, countries = c('CONGO', 'TANZANIA'))
document()
document()
document()
document()
document()
document()
help(roxygen2)
use_package_doc()
